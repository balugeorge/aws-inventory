#!/usr/bin/env python3
import sys
import argparse
import yaml
import botocore.session
import boto3
import csv
parser = argparse.ArgumentParser()
def inventory():
    access_key, secret_key, region = None, None, None
    #Load keys are region from the credentials.yml file
    with open('credentials.yml', 'r') as streams:
        for data in yaml.load_all(streams):
            if access_key is None:
                    access_key=data.get(args.profile, {}).get('AWS_ACCESS_KEY_ID')
            if secret_key is None:
                    secret_key=data.get(args.profile, {}).get('AWS_SECRET_ACCESS_KEY')
            if region is None:
                    region=data.get(args.profile, {}).get('AWS_DEFAULT_REGION')
            if args.list:
                    for profiles in data:
                        print(profiles)
    #Set session
    session = boto3.session.Session(
        aws_access_key_id=access_key,
        aws_secret_access_key=secret_key,
        region_name=region,
    )
    #List instances
    if args.profile:
        ec2 = session.resource('ec2')
        instances = ec2.instances.filter(Filters=[{'Name': 'instance-state-name', 'Values':['running']}])
        if args.out:
            print("instance_id\tinstance_type\tpublic_ip\tprivate_ip")
            for instance in instances:
                print(instance.id, instance.instance_type, instance.public_ip_address, instance.private_ip_address, sep='\t')
        elif args.file:
            open('inventory.csv', 'w').close()
            with open('inventory.csv', 'a', newline='') as csvfile:
                writer = csv.writer(csvfile, delimiter=',')
                writer.writerow(["instance_id","instance_type","public_ip","private_ip"])
                for instance in instances:
                    writer.writerow([instance.id, instance.instance_type, instance.public_ip_address, instance.private_ip_address])
if __name__ == '__main__':
    parser.add_argument('-p', '--profile', help='enter profile name listed under the credentials.yml file')
    parser.add_argument('-l', '--list', help='print a list of all available profiles', action='store_true')
    parser.add_argument('-o', '--out', help='print inventory to stdout', action='store_true')
    parser.add_argument('-f', '--file', help='create a csv inventory file', action='store_true')
    args = parser.parse_args()
    if len(sys.argv) == 1:
        parser.print_help()
    else:
        try:
            inventory()
        except Exception as e:
            print(str(e))
